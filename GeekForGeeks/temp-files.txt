Possibly your code doesn't work correctly for multiple test-cases (TCs).

The first test case where your code failed:

Input:

42
4 42 27 16 28 3 4 5 9 3 31 5 5 29 10 18 35 35 33 19 41 23 8 32 9 5 8 18 35 13 6 7 6 10 11 13 37 2 25 7 28 43

And Your Code's output is:

23


Its Correct output is:

-1



Contest Home Coding Problems
 Time Left :
00 : 00 : 35 : 14
Contest Home
Coding Problems
Problem
 Submissions
 All Problems
Accuracy: 29.74% Submissions: 1586 Points: 20



Input: 
n = 5 
A[] = {1,3,5,2,2} 
Output: 3 
Explanation:  
equilibrium point is at position 3 
as elements before it (1+3) = 
elements after it (2+2). 


Input:
n = 1
A[] = {1}
Output: 1
Explanation:
Since its the only element hence
its the only equilibrium point.






Contest Home Coding Problems
 Time Left :
00 : 00 : 35 : 14
Contest Home
Coding Problems
Problem
 Submissions
 All Problems
Accuracy: 29.74% Submissions: 1586 Points: 20



Input: 
n = 5 
A[] = {1,3,5,2,2} 
Output: 3 
Explanation:  
equilibrium point is at position 3 
as elements before it (1+3) = 
elements after it (2+2). 


Input:
n = 1
A[] = {1}
Output: 1
Explanation:
Since its the only element hence
its the only equilibrium point.





// { Driver Code Starts
import java.io.*;
import java.util.*;
import java.util.stream.*;

class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while (t-- > 0) {
            
            //taking input n
            int n = Integer.parseInt(br.readLine().trim());
            long arr[] = new long[n];
            String inputLine[] = br.readLine().trim().split(" ");
            
            //adding elements to the array
            for (int i = 0; i < n; i++) {
                arr[i] = Long.parseLong(inputLine[i]);
            }

            Solution ob = new Solution();
            
            //calling equilibriumPoint() function
            System.out.println(ob.equilibriumPoint(arr, n));
        }
    }
}// } Driver Code Ends


class Solution {

    
    // a: input array
    // n: size of array
    // Function to find equilibrium point in the array.
    public static int equilibriumPoint(long arr[], int n) {

        // Your code here
        int i;
        int j = n;
        long leftSum = 0;
        long rightSum = 0;
        if(n==1){
            return 1;
        }
        for(i=0;i<n;i++) {
            if(leftSum > 0 && rightSum > 0 && leftSum == rightSum) {
                // i++;
                j--;
                if(i == j) {
                    return i+1;
                }
            } else {
                leftSum = leftSum + arr[i];
                if(leftSum > rightSum) {
                    while(leftSum > rightSum){
                        j--;
                        rightSum = rightSum + arr[j];
                    }
                }
                
            }
        }
        return -1;
    }
}




// Input: 
// n = 5 
// A[] = {1,3,5,2,2} 
// Output: 3 
// Explanation:  
// equilibrium point is at position 3 
// as elements before it (1+3) = 
// elements after it (2+2). 


// Input:
// n = 1
// A[] = {1}
// Output: 1
// Explanation:
// Since its the only element hence
// its the only equilibrium point.


// { Driver Code Starts
import java.io.*;
import java.util.*;
import java.util.stream.*;

class Main {    
public static void main(String[] args) throws IOException {
        // BufferedReader br =
        //     new BufferedReader(new InputStreamReader(System.in));
        // int t =
        //     Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        // while (t-- > 0) {
            
        //     //taking input n
        //     int n = Integer.parseInt(br.readLine().trim());
        //     long arr[] = new long[n];
        //     String inputLine[] = br.readLine().trim().split(" ");
            
        //     //adding elements to the array
        //     for (int i = 0; i < n; i++) {
        //         arr[i] = Long.parseLong(inputLine[i]);
        //     }

        //     Solution ob = new Solution();
            
            //calling equilibriumPoint() function
            long[] arr = {1,3,5,2,2};
            long[] arr1 = {4,5,2,2};
            int n = arr.length;
            System.out.println(Solution.equilibriumPoint(arr1, n));
        }
    }
//}// } Driver Code Ends


class Solution {
    // a: input array
    // n: size of array
    // Function to find equilibrium point in the array.
    public static int equilibriumPoint(long arr[], int n) {
      int left = 0;
      int right = n-1;
      
      // while(left<right){
      //   lCount += arr[left];
      //   rCount += arr[right];
      //   left++;
      //   right--;
      //   if(left>=right && lCount == rCount){
      //     System.out.println(lCount+" "+rCount);
      //     return ++left;
      //   }
      // }
        long lCount = arr[0];
        for(int i=1; i < arr.length; i++){
          long rCount = 0;
          int j=i+1;
          while(j<n){
            rCount+=arr[j];
            j++;
          }
          if(lCount == rCount){
            System.out.println(lCount+" "+rCount);
            return ++i;
          }
          lCount+= arr[i];
        }
      
      //System.out.println(lCount+" "+rCount);
      return -1;
      
    }
    
    }
  



  
array of 10 no.
print shortest distance b/w 2 closest number


use oops chess game for heirarchy.


Java 8
print all strings starting with "a"

print if no is prime.


how synchronized 


GC parameter


how do you tune the application using GC
